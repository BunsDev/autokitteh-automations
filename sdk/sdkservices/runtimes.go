package sdkservices

import (
	"context"
	"io/fs"

	"go.autokitteh.dev/autokitteh/sdk/sdkbuildfile"
	"go.autokitteh.dev/autokitteh/sdk/sdkerrors"
	"go.autokitteh.dev/autokitteh/sdk/sdkexecutor"
	"go.autokitteh.dev/autokitteh/sdk/sdktypes"
)

type Runtimes interface {
	List(ctx context.Context) ([]sdktypes.Runtime, error)
	New(ctx context.Context, name sdktypes.Symbol) (Runtime, error)

	Build(ctx context.Context, fs fs.FS, symbols []sdktypes.Symbol, memo map[string]string) (*sdkbuildfile.BuildFile, error)

	Run(
		ctx context.Context,
		rid sdktypes.RunID,
		sid sdktypes.SessionID,
		path string,
		build *sdkbuildfile.BuildFile,
		globals map[string]sdktypes.Value,
		cbs RunCallbacks,
	) (Run, error)
}

type Runtime interface {
	Get() sdktypes.Runtime

	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Build(ctx context.Context, fs fs.FS, path string, symbols []sdktypes.Symbol) (sdktypes.BuildArtifact, error)

	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Run(
		ctx context.Context,
		rid sdktypes.RunID, // generated by caller. guaranteed to be unique system-wide.
		sid sdktypes.SessionID,
		path string, // where to start running from.
		compiled map[string][]byte,
		values map[string]sdktypes.Value,
		cbs RunCallbacks,
	) (Run, error)
}

type Run interface {
	ID() sdktypes.RunID

	Close()

	sdkexecutor.Executor
}
type RunCallbacks interface {
	Load(ctx context.Context, rid sdktypes.RunID, path string) (map[string]sdktypes.Value, error)
	Call(ctx context.Context, rid sdktypes.RunID, v sdktypes.Value, args []sdktypes.Value, kwargs map[string]sdktypes.Value) (sdktypes.Value, error)
	Print(ctx context.Context, rid sdktypes.RunID, text string)
	NewRunID() sdktypes.RunID
}

type NopRunCallbacks struct{}

func (NopRunCallbacks) Load(context.Context, sdktypes.RunID, string) (map[string]sdktypes.Value, error) {
	return nil, sdkerrors.ErrNotFound
}

func (NopRunCallbacks) Call(context.Context, sdktypes.RunID, sdktypes.Value, []sdktypes.Value, map[string]sdktypes.Value) (sdktypes.Value, error) {
	return sdktypes.InvalidValue, sdkerrors.ErrNotFound
}

func (NopRunCallbacks) Print(context.Context, sdktypes.RunID, string) {}

func (NopRunCallbacks) NewRunID() sdktypes.RunID { return sdktypes.NewRunID() }
