package sdkservices

import (
	"context"
	"io/fs"
	"time"

	"github.com/google/uuid"

	"go.autokitteh.dev/autokitteh/sdk/sdkbuildfile"
	"go.autokitteh.dev/autokitteh/sdk/sdkerrors"
	"go.autokitteh.dev/autokitteh/sdk/sdkexecutor"
	"go.autokitteh.dev/autokitteh/sdk/sdktypes"
)

type Runtimes interface {
	List(ctx context.Context) ([]sdktypes.Runtime, error)
	New(ctx context.Context, name sdktypes.Symbol) (Runtime, error)

	Build(ctx context.Context, fs fs.FS, symbols []sdktypes.Symbol, memo map[string]string) (*sdkbuildfile.BuildFile, error)

	Run(
		ctx context.Context,
		rid sdktypes.RunID,
		path string,
		build *sdkbuildfile.BuildFile,
		globals map[string]sdktypes.Value,
		cbs *RunCallbacks,
	) (Run, error)
}

type Runtime interface {
	Get() sdktypes.Runtime

	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Build(ctx context.Context, fs fs.FS, path string, symbols []sdktypes.Symbol) (sdktypes.BuildArtifact, error)

	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Run(
		ctx context.Context,
		rid sdktypes.RunID, // generated by caller. guaranteed to be unique system-wide.
		path string, // where to start running from.
		compiled map[string][]byte,
		values map[string]sdktypes.Value,
		cbs *RunCallbacks,
	) (Run, error)
}

type (
	RunLoadFunc  = func(ctx context.Context, rid sdktypes.RunID, path string) (map[string]sdktypes.Value, error)
	RunCallFunc  = func(ctx context.Context, rid sdktypes.RunID, v sdktypes.Value, args []sdktypes.Value, kwargs map[string]sdktypes.Value) (sdktypes.Value, error)
	RunPrintFunc = func(ctx context.Context, rid sdktypes.RunID, text string)
	NewRunIDFunc = func() sdktypes.RunID

	RunSleepFunc       = func(ctx context.Context, t time.Duration) error
	RunStartFunc       = func(ctx context.Context, entrypoint sdktypes.CodeLocation, inputs map[string]sdktypes.Value, memo map[string]string) (string, error)
	RunSubscribeFunc   = func(ctx context.Context, name, filter string) (uuid.UUID, error)
	RunUnsubscribeFunc = func(ctx context.Context, id uuid.UUID) error
	RunNextEventFunc   = func(ctx context.Context, subscriptions []uuid.UUID, t time.Duration) (sdktypes.Value, error)

	RunSyscalls struct {
		Sleep       RunSleepFunc
		Start       RunStartFunc
		Subscribe   RunSubscribeFunc
		Unsubscribe RunUnsubscribeFunc
		NextEvent   RunNextEventFunc
	}
)

type RunCallbacks struct {
	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Load RunLoadFunc

	// Returns sdktypes.ProgramErrorAsError if not internal error.
	Call RunCallFunc

	Print RunPrintFunc

	NewRunID NewRunIDFunc

	Syscalls *RunSyscalls
}

type Run interface {
	ID() sdktypes.RunID

	Close()

	sdkexecutor.Executor
}

func (rc *RunCallbacks) SafeLoad(ctx context.Context, rid sdktypes.RunID, path string) (map[string]sdktypes.Value, error) {
	if rc == nil || rc.Load == nil {
		return nil, nil
	}

	return rc.Load(ctx, rid, path)
}

func (rc *RunCallbacks) SafeCall(ctx context.Context, rid sdktypes.RunID, v sdktypes.Value, args []sdktypes.Value, kwargs map[string]sdktypes.Value) (sdktypes.Value, error) {
	if rc == nil || rc.Call == nil {
		return sdktypes.InvalidValue, sdkerrors.ErrNotImplemented
	}

	return rc.Call(ctx, rid, v, args, kwargs)
}

func (rc *RunCallbacks) SafePrint(ctx context.Context, rid sdktypes.RunID, text string) {
	if rc == nil || rc.Print == nil {
		return
	}

	rc.Print(ctx, rid, text)
}

func (rc *RunCallbacks) SafeNewRunID() sdktypes.RunID { return sdktypes.NewRunID() }

func (rc *RunCallbacks) SafeSyscalls() *RunSyscalls {
	sc := rc.Syscalls

	if rc == nil {
		sc = &RunSyscalls{}
	}

	if sc.Sleep == nil {
		sc.Sleep = func(ctx context.Context, t time.Duration) error {
			select {
			case <-ctx.Done():
				return ctx.Err()
			case <-time.After(t):
				return nil
			}
		}
	}

	if sc.NextEvent == nil {
		sc.NextEvent = func(context.Context, []uuid.UUID, time.Duration) (sdktypes.Value, error) {
			return sdktypes.InvalidValue, sdkerrors.ErrNotImplemented
		}
	}

	if sc.Start == nil {
		sc.Start = func(context.Context, sdktypes.CodeLocation, map[string]sdktypes.Value, map[string]string) (string, error) {
			return "", sdkerrors.ErrNotImplemented
		}
	}

	if sc.Subscribe == nil {
		sc.Subscribe = func(context.Context, string, string) (uuid.UUID, error) { return uuid.Nil, sdkerrors.ErrNotImplemented }
	}

	if sc.Unsubscribe == nil {
		sc.Unsubscribe = func(context.Context, uuid.UUID) error { return nil }
	}

	return sc
}
