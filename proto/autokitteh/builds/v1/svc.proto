syntax = "proto3";

package autokitteh.builds.v1;

import "autokitteh/builds/v1/build.proto";
import "autokitteh/program/v1/program.proto";
import "buf/validate/validate.proto";

message GetRequest {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetResponse {
  Build build = 1;
}

message ListRequest {
  uint32 limit = 1;
  string project_id = 2;
  BuildStatus status = 3;
}

message ListResponse {
  // Chronological order: the last element is the latest.
  repeated Build builds = 1 [(buf.validate.field).repeated.items.required = true];
}

message SaveRequest {
  option (buf.validate.message).cel = {
    id: "builds.build_id_must_be_empty"
    message: "build_id must not be specified"
    expression: "has(this.build) && this.build.build_id == ''"
  };

  Build build = 1;

  bytes data = 2 [(buf.validate.field).bytes.min_len = 1];
}

message SaveResponse {
  string build_id = 1;
}

message DeleteRequest {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];
}

message DeleteResponse {}

message DownloadRequest {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];
}

message DownloadResponse {
  bytes data = 1;
}

message DescribeRequest {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];
}

message DescribeResponse {
  string description_json = 1;
}

message CreateRequest {
  option (buf.validate.message).cel = {
    id: "builds.build_id_must_be_empty"
    message: "build_id must not be specified"
    expression: "has(this.build) && this.build.build_id == ''"
  };

  Build build = 1 [(buf.validate.field).required = true];
}

message CreateResponse {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];
}

message UpdateBuildRequest {
  string build_id = 1 [(buf.validate.field).string.min_len = 1];

  BuildStatus status = 2;

  // Relevant only if the status is READY.
  bytes data = 3;

  // Relevant only if the status is ERROR.
  program.v1.Error error = 4;
}

message UpdateBuildResponse {}

service BuildsService {
  rpc Get(GetRequest) returns (GetResponse);
  rpc List(ListRequest) returns (ListResponse);
  // (legacy) Create a new build and updates its status to READY.
  rpc Save(SaveRequest) returns (SaveResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Download(DownloadRequest) returns (DownloadResponse);
  rpc Describe(DescribeRequest) returns (DescribeResponse);

  // Create a build in status PENDING.
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc UpdateBuild(UpdateBuildRequest) returns (UpdateBuildResponse);
}
