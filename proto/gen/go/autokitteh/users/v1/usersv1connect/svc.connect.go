// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/users/v1/svc.proto

package usersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/users/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "autokitteh.users.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceCreateProcedure is the fully-qualified name of the UsersService's Create RPC.
	UsersServiceCreateProcedure = "/autokitteh.users.v1.UsersService/Create"
	// UsersServiceFindByProviderProcedure is the fully-qualified name of the UsersService's
	// FindByProvider RPC.
	UsersServiceFindByProviderProcedure = "/autokitteh.users.v1.UsersService/FindByProvider"
	// UsersServiceFindByProviderOrCreateProcedure is the fully-qualified name of the UsersService's
	// FindByProviderOrCreate RPC.
	UsersServiceFindByProviderOrCreateProcedure = "/autokitteh.users.v1.UsersService/FindByProviderOrCreate"
	// UsersServiceGetProcedure is the fully-qualified name of the UsersService's Get RPC.
	UsersServiceGetProcedure = "/autokitteh.users.v1.UsersService/Get"
)

// UsersServiceClient is a client for the autokitteh.users.v1.UsersService service.
type UsersServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	FindByProvider(context.Context, *connect.Request[v1.FindByProviderRequest]) (*connect.Response[v1.FindByProviderResponse], error)
	FindByProviderOrCreate(context.Context, *connect.Request[v1.FindByProviderOrCreateRequest]) (*connect.Response[v1.FindByProviderOrCreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewUsersServiceClient constructs a client for the autokitteh.users.v1.UsersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+UsersServiceCreateProcedure,
			opts...,
		),
		findByProvider: connect.NewClient[v1.FindByProviderRequest, v1.FindByProviderResponse](
			httpClient,
			baseURL+UsersServiceFindByProviderProcedure,
			opts...,
		),
		findByProviderOrCreate: connect.NewClient[v1.FindByProviderOrCreateRequest, v1.FindByProviderOrCreateResponse](
			httpClient,
			baseURL+UsersServiceFindByProviderOrCreateProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+UsersServiceGetProcedure,
			opts...,
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	create                 *connect.Client[v1.CreateRequest, v1.CreateResponse]
	findByProvider         *connect.Client[v1.FindByProviderRequest, v1.FindByProviderResponse]
	findByProviderOrCreate *connect.Client[v1.FindByProviderOrCreateRequest, v1.FindByProviderOrCreateResponse]
	get                    *connect.Client[v1.GetRequest, v1.GetResponse]
}

// Create calls autokitteh.users.v1.UsersService.Create.
func (c *usersServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// FindByProvider calls autokitteh.users.v1.UsersService.FindByProvider.
func (c *usersServiceClient) FindByProvider(ctx context.Context, req *connect.Request[v1.FindByProviderRequest]) (*connect.Response[v1.FindByProviderResponse], error) {
	return c.findByProvider.CallUnary(ctx, req)
}

// FindByProviderOrCreate calls autokitteh.users.v1.UsersService.FindByProviderOrCreate.
func (c *usersServiceClient) FindByProviderOrCreate(ctx context.Context, req *connect.Request[v1.FindByProviderOrCreateRequest]) (*connect.Response[v1.FindByProviderOrCreateResponse], error) {
	return c.findByProviderOrCreate.CallUnary(ctx, req)
}

// Get calls autokitteh.users.v1.UsersService.Get.
func (c *usersServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the autokitteh.users.v1.UsersService service.
type UsersServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	FindByProvider(context.Context, *connect.Request[v1.FindByProviderRequest]) (*connect.Response[v1.FindByProviderResponse], error)
	FindByProviderOrCreate(context.Context, *connect.Request[v1.FindByProviderOrCreateRequest]) (*connect.Response[v1.FindByProviderOrCreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceCreateHandler := connect.NewUnaryHandler(
		UsersServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	usersServiceFindByProviderHandler := connect.NewUnaryHandler(
		UsersServiceFindByProviderProcedure,
		svc.FindByProvider,
		opts...,
	)
	usersServiceFindByProviderOrCreateHandler := connect.NewUnaryHandler(
		UsersServiceFindByProviderOrCreateProcedure,
		svc.FindByProviderOrCreate,
		opts...,
	)
	usersServiceGetHandler := connect.NewUnaryHandler(
		UsersServiceGetProcedure,
		svc.Get,
		opts...,
	)
	return "/autokitteh.users.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceCreateProcedure:
			usersServiceCreateHandler.ServeHTTP(w, r)
		case UsersServiceFindByProviderProcedure:
			usersServiceFindByProviderHandler.ServeHTTP(w, r)
		case UsersServiceFindByProviderOrCreateProcedure:
			usersServiceFindByProviderOrCreateHandler.ServeHTTP(w, r)
		case UsersServiceGetProcedure:
			usersServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.users.v1.UsersService.Create is not implemented"))
}

func (UnimplementedUsersServiceHandler) FindByProvider(context.Context, *connect.Request[v1.FindByProviderRequest]) (*connect.Response[v1.FindByProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.users.v1.UsersService.FindByProvider is not implemented"))
}

func (UnimplementedUsersServiceHandler) FindByProviderOrCreate(context.Context, *connect.Request[v1.FindByProviderOrCreateRequest]) (*connect.Response[v1.FindByProviderOrCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.users.v1.UsersService.FindByProviderOrCreate is not implemented"))
}

func (UnimplementedUsersServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.users.v1.UsersService.Get is not implemented"))
}
