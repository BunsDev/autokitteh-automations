// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/mappings/v1/svc.proto

package mappingsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/mappings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// MappingsServiceName is the fully-qualified name of the MappingsService service.
	MappingsServiceName = "autokitteh.mappings.v1.MappingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MappingsServiceCreateProcedure is the fully-qualified name of the MappingsService's Create RPC.
	MappingsServiceCreateProcedure = "/autokitteh.mappings.v1.MappingsService/Create"
	// MappingsServiceDeleteProcedure is the fully-qualified name of the MappingsService's Delete RPC.
	MappingsServiceDeleteProcedure = "/autokitteh.mappings.v1.MappingsService/Delete"
	// MappingsServiceGetProcedure is the fully-qualified name of the MappingsService's Get RPC.
	MappingsServiceGetProcedure = "/autokitteh.mappings.v1.MappingsService/Get"
	// MappingsServiceListProcedure is the fully-qualified name of the MappingsService's List RPC.
	MappingsServiceListProcedure = "/autokitteh.mappings.v1.MappingsService/List"
)

// MappingsServiceClient is a client for the autokitteh.mappings.v1.MappingsService service.
type MappingsServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
}

// NewMappingsServiceClient constructs a client for the autokitteh.mappings.v1.MappingsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMappingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MappingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mappingsServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+MappingsServiceCreateProcedure,
			opts...,
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+MappingsServiceDeleteProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+MappingsServiceGetProcedure,
			opts...,
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+MappingsServiceListProcedure,
			opts...,
		),
	}
}

// mappingsServiceClient implements MappingsServiceClient.
type mappingsServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
}

// Create calls autokitteh.mappings.v1.MappingsService.Create.
func (c *mappingsServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls autokitteh.mappings.v1.MappingsService.Delete.
func (c *mappingsServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls autokitteh.mappings.v1.MappingsService.Get.
func (c *mappingsServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls autokitteh.mappings.v1.MappingsService.List.
func (c *mappingsServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// MappingsServiceHandler is an implementation of the autokitteh.mappings.v1.MappingsService
// service.
type MappingsServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
}

// NewMappingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMappingsServiceHandler(svc MappingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mappingsServiceCreateHandler := connect.NewUnaryHandler(
		MappingsServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	mappingsServiceDeleteHandler := connect.NewUnaryHandler(
		MappingsServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	mappingsServiceGetHandler := connect.NewUnaryHandler(
		MappingsServiceGetProcedure,
		svc.Get,
		opts...,
	)
	mappingsServiceListHandler := connect.NewUnaryHandler(
		MappingsServiceListProcedure,
		svc.List,
		opts...,
	)
	return "/autokitteh.mappings.v1.MappingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MappingsServiceCreateProcedure:
			mappingsServiceCreateHandler.ServeHTTP(w, r)
		case MappingsServiceDeleteProcedure:
			mappingsServiceDeleteHandler.ServeHTTP(w, r)
		case MappingsServiceGetProcedure:
			mappingsServiceGetHandler.ServeHTTP(w, r)
		case MappingsServiceListProcedure:
			mappingsServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMappingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMappingsServiceHandler struct{}

func (UnimplementedMappingsServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.mappings.v1.MappingsService.Create is not implemented"))
}

func (UnimplementedMappingsServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.mappings.v1.MappingsService.Delete is not implemented"))
}

func (UnimplementedMappingsServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.mappings.v1.MappingsService.Get is not implemented"))
}

func (UnimplementedMappingsServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.mappings.v1.MappingsService.List is not implemented"))
}
