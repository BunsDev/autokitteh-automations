// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/mappings/v1/mapping.proto (package autokitteh.mappings.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CodeLocation } from "../../program/v1/program_pb.js";

/**
 * @generated from message autokitteh.mappings.v1.MappingEvent
 */
export class MappingEvent extends Message<MappingEvent> {
  /**
   * @generated from field: string event_type = 1;
   */
  eventType = "";

  /**
   * @generated from field: autokitteh.program.v1.CodeLocation code_location = 2;
   */
  codeLocation?: CodeLocation;

  constructor(data?: PartialMessage<MappingEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.mappings.v1.MappingEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_location", kind: "message", T: CodeLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MappingEvent {
    return new MappingEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MappingEvent {
    return new MappingEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MappingEvent {
    return new MappingEvent().fromJsonString(jsonString, options);
  }

  static equals(a: MappingEvent | PlainMessage<MappingEvent> | undefined, b: MappingEvent | PlainMessage<MappingEvent> | undefined): boolean {
    return proto3.util.equals(MappingEvent, a, b);
  }
}

/**
 * @generated from message autokitteh.mappings.v1.Mapping
 */
export class Mapping extends Message<Mapping> {
  /**
   * @generated from field: string mapping_id = 1;
   */
  mappingId = "";

  /**
   * env must have a project parent.
   *
   * @generated from field: string env_id = 2;
   */
  envId = "";

  /**
   * @generated from field: string connection_id = 3;
   */
  connectionId = "";

  /**
   * @generated from field: string module_name = 4;
   */
  moduleName = "";

  /**
   * @generated from field: repeated autokitteh.mappings.v1.MappingEvent events = 5;
   */
  events: MappingEvent[] = [];

  constructor(data?: PartialMessage<Mapping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.mappings.v1.Mapping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mapping_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "env_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "events", kind: "message", T: MappingEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mapping {
    return new Mapping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mapping {
    return new Mapping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mapping {
    return new Mapping().fromJsonString(jsonString, options);
  }

  static equals(a: Mapping | PlainMessage<Mapping> | undefined, b: Mapping | PlainMessage<Mapping> | undefined): boolean {
    return proto3.util.equals(Mapping, a, b);
  }
}

