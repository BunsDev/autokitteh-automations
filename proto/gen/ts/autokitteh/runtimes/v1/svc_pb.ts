// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/runtimes/v1/svc.proto (package autokitteh.runtimes.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Runtime } from "./runtime_pb.js";

/**
 * @generated from message autokitteh.runtimes.v1.DescribeRequest
 */
export class DescribeRequest extends Message<DescribeRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DescribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runtimes.v1.DescribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescribeRequest {
    return new DescribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescribeRequest {
    return new DescribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescribeRequest {
    return new DescribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DescribeRequest | PlainMessage<DescribeRequest> | undefined, b: DescribeRequest | PlainMessage<DescribeRequest> | undefined): boolean {
    return proto3.util.equals(DescribeRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runtimes.v1.DescribeResponse
 */
export class DescribeResponse extends Message<DescribeResponse> {
  /**
   * empty if not found.
   *
   * @generated from field: autokitteh.runtimes.v1.Runtime runtime = 1;
   */
  runtime?: Runtime;

  constructor(data?: PartialMessage<DescribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runtimes.v1.DescribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime", kind: "message", T: Runtime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescribeResponse {
    return new DescribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescribeResponse {
    return new DescribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescribeResponse {
    return new DescribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DescribeResponse | PlainMessage<DescribeResponse> | undefined, b: DescribeResponse | PlainMessage<DescribeResponse> | undefined): boolean {
    return proto3.util.equals(DescribeResponse, a, b);
  }
}

/**
 * TODO: fieldmask.
 *
 * @generated from message autokitteh.runtimes.v1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runtimes.v1.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runtimes.v1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated autokitteh.runtimes.v1.Runtime runtimes = 1;
   */
  runtimes: Runtime[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runtimes.v1.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtimes", kind: "message", T: Runtime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

