// @generated by protoc-gen-connect-es v1.1.4 with parameter "target=ts"
// @generated from file autokitteh/secrets/v1/svc.proto (package autokitteh.secrets.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateRequest, CreateResponse, GetRequest, GetResponse, ListRequest, ListResponse } from "./svc_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * SecretsService is a simple API for managing autokitteh user secrets.
 * So far, this is limited to connections (managed by integrations).
 *
 * @generated from service autokitteh.secrets.v1.SecretsService
 */
export const SecretsService = {
  typeName: "autokitteh.secrets.v1.SecretsService",
  methods: {
    /**
     * Create generates a new token to represent a connection's specified
     * key-value data, and associates them bidirectionally. If the same
     * request is sent N times, this method returns N different tokens.
     *
     * @generated from rpc autokitteh.secrets.v1.SecretsService.Create
     */
    create: {
      name: "Create",
      I: CreateRequest,
      O: CreateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get retrieves a connection's key-value data based on the given token.
     * If the token isnâ€™t found then we return an error.
     *
     * @generated from rpc autokitteh.secrets.v1.SecretsService.Get
     */
    get: {
      name: "Get",
      I: GetRequest,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List enumerates all the tokens (0 or more) that are associated with a given
     * connection identifier. This enables autokitteh to dispatch/fan-out asynchronous
     * events that it receives from integrations through all the relevant connections.
     *
     * @generated from rpc autokitteh.secrets.v1.SecretsService.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

