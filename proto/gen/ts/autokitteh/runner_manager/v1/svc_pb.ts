// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/runner_manager/v1/svc.proto (package autokitteh.runner_manager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message autokitteh.runner_manager.v1.ContainerConfig
 */
export class ContainerConfig extends Message<ContainerConfig> {
  /**
   * TBD by @efiShtain
   *
   * @generated from field: string image = 1;
   */
  image = "";

  constructor(data?: PartialMessage<ContainerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.ContainerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerConfig {
    return new ContainerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerConfig {
    return new ContainerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerConfig {
    return new ContainerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ContainerConfig | PlainMessage<ContainerConfig> | undefined, b: ContainerConfig | PlainMessage<ContainerConfig> | undefined): boolean {
    return proto3.util.equals(ContainerConfig, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.StartRequest
 */
export class StartRequest extends Message<StartRequest> {
  /**
   * @generated from field: autokitteh.runner_manager.v1.ContainerConfig container_config = 1;
   */
  containerConfig?: ContainerConfig;

  /**
   * user code as tar archive
   *
   * @generated from field: bytes build_artifact = 2;
   */
  buildArtifact = new Uint8Array(0);

  /**
   * vars from manifest, secrets and connections
   *
   * @generated from field: map<string, string> vars = 3;
   */
  vars: { [key: string]: string } = {};

  /**
   * @generated from field: string worker_address = 4;
   */
  workerAddress = "";

  constructor(data?: PartialMessage<StartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.StartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "container_config", kind: "message", T: ContainerConfig },
    { no: 2, name: "build_artifact", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "worker_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartRequest {
    return new StartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartRequest | PlainMessage<StartRequest> | undefined, b: StartRequest | PlainMessage<StartRequest> | undefined): boolean {
    return proto3.util.equals(StartRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.StartResponse
 */
export class StartResponse extends Message<StartResponse> {
  /**
   * @generated from field: string runner_id = 1;
   */
  runnerId = "";

  /**
   * @generated from field: string runner_address = 2;
   */
  runnerAddress = "";

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<StartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.StartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartResponse {
    return new StartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartResponse | PlainMessage<StartResponse> | undefined, b: StartResponse | PlainMessage<StartResponse> | undefined): boolean {
    return proto3.util.equals(StartResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.RunnerHealthRequest
 */
export class RunnerHealthRequest extends Message<RunnerHealthRequest> {
  /**
   * @generated from field: string runner_id = 1;
   */
  runnerId = "";

  constructor(data?: PartialMessage<RunnerHealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.RunnerHealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerHealthRequest {
    return new RunnerHealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerHealthRequest {
    return new RunnerHealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerHealthRequest {
    return new RunnerHealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerHealthRequest | PlainMessage<RunnerHealthRequest> | undefined, b: RunnerHealthRequest | PlainMessage<RunnerHealthRequest> | undefined): boolean {
    return proto3.util.equals(RunnerHealthRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.RunnerHealthResponse
 */
export class RunnerHealthResponse extends Message<RunnerHealthResponse> {
  /**
   * @generated from field: bool healthy = 1;
   */
  healthy = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<RunnerHealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.RunnerHealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "healthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerHealthResponse {
    return new RunnerHealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerHealthResponse {
    return new RunnerHealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerHealthResponse {
    return new RunnerHealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerHealthResponse | PlainMessage<RunnerHealthResponse> | undefined, b: RunnerHealthResponse | PlainMessage<RunnerHealthResponse> | undefined): boolean {
    return proto3.util.equals(RunnerHealthResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.StopRequest
 */
export class StopRequest extends Message<StopRequest> {
  /**
   * @generated from field: string runner_id = 1;
   */
  runnerId = "";

  constructor(data?: PartialMessage<StopRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.StopRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopRequest {
    return new StopRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopRequest | PlainMessage<StopRequest> | undefined, b: StopRequest | PlainMessage<StopRequest> | undefined): boolean {
    return proto3.util.equals(StopRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.StopResponse
 */
export class StopResponse extends Message<StopResponse> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<StopResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.StopResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopResponse {
    return new StopResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopResponse | PlainMessage<StopResponse> | undefined, b: StopResponse | PlainMessage<StopResponse> | undefined): boolean {
    return proto3.util.equals(StopResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.HealthRequest
 */
export class HealthRequest extends Message<HealthRequest> {
  constructor(data?: PartialMessage<HealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.HealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthRequest {
    return new HealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthRequest | PlainMessage<HealthRequest> | undefined, b: HealthRequest | PlainMessage<HealthRequest> | undefined): boolean {
    return proto3.util.equals(HealthRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.runner_manager.v1.HealthResponse
 */
export class HealthResponse extends Message<HealthResponse> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<HealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runner_manager.v1.HealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthResponse {
    return new HealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthResponse | PlainMessage<HealthResponse> | undefined, b: HealthResponse | PlainMessage<HealthResponse> | undefined): boolean {
    return proto3.util.equals(HealthResponse, a, b);
  }
}

